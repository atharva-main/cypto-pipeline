version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: crypto_pipeline
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeline_user -d crypto_pipeline"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    depends_on:
      - postgres
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Data Producer Service
  data-producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: data-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC_RAW: raw_data
      LOG_LEVEL: INFO
    volumes:
      - ./src/producer:/app/src/producer
      - ./config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped

  # Stream Processor Service
  stream-processor:
    build:
      context: .
      dockerfile: Dockerfile.processor
    container_name: stream-processor
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC_RAW: raw_data
      KAFKA_TOPIC_PROCESSED: processed_data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: crypto_pipeline
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_password
      LOG_LEVEL: INFO
    volumes:
      - ./src/processor:/app/src/processor
      - ./config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped

  # Machine Learning Service
  # ml-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.ml
  #   container_name: ml-service
  #   depends_on:
  #     - postgres
  #   environment:
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_DB: crypto_pipeline
  #     POSTGRES_USER: pipeline_user
  #     POSTGRES_PASSWORD: pipeline_password
  #     MODEL_PATH: /app/model/latest_model.pkl
  #     LOG_LEVEL: INFO
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./src/ml_service:/app/src/ml_service
  #     - ./models:/app/model
  #     - ./logs:/app/logs
  #   restart: unless-stopped


volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  grafana-data: